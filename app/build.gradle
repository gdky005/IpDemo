plugins {
    id 'com.android.application'

    id 'kotlin-android'

    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    namespace 'wq.gdky005.ip.dmeo'
    compileSdk 34

    defaultConfig {
        applicationId "wq.gdky005.ip.dmeo"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 10101
        versionName "1.1.1"
    }

    signingConfigs {
        release {
            storeFile file('2024-08-30_wq_release_old_key.jks')
            storePassword 'wq12345678'
            keyAlias 'wangqing'
            keyPassword 'wq12345678'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility '17'
        targetCompatibility '17'
    }

//    kotlinOptions {
//        jvmTarget = '17'
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.core:core-ktx:1.13.0'


    implementation 'com.blankj:utilcodex:1.31.1'
    implementation('com.github.ZhuoKeTeam:zhuoke-sdk:1.1.1', {
        exclude group: 'com.blankj', module: 'utilcode'
    })


    implementation platform('com.google.firebase:firebase-bom:33.3.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
}



// 在build.gradle文件的最后添加
tasks.register('renameAndMoveApk') {
    def versionCode = android.defaultConfig.versionCode
    def versionName = android.defaultConfig.versionName
    def apkPath = "${buildDir}/outputs/apk/release/app-release.apk"
    def apkReleasePath = "${projectDir}/release/app-release.apk"

    def outputDir = "${projectDir}/release"
    def targetPath = "${outputDir}/${rootProject.name}-Release-${versionName}-${versionCode}.apk"
    doLast {
        file(outputDir).mkdirs()

        println("$apkPath=" + file(apkPath).exists())
        println("$apkReleasePath=" + file(apkReleasePath).exists())
        println("$outputDir=" + file(outputDir).exists())
        println("$targetPath=" + file(targetPath).exists())

        if (!file(apkPath).exists()) {
            apkPath = apkReleasePath
        }

        exec {
            commandLine 'mv', apkPath, targetPath
        }
    }
}
tasks.register('renameAndMoveAab') {
    def versionCode = android.defaultConfig.versionCode
    def versionName = android.defaultConfig.versionName
    def outputDir = "${projectDir}/release"
    def aabPath = "${projectDir}/release/app-release.aab"
    def aabReleasePath = "${buildDir}/outputs/bundle/release/app-release.aab"
    def targetPath = "${outputDir}/${rootProject.name}-Release-${versionName}-${versionCode}.aab"
    doLast {
        file(outputDir).mkdirs()

        println("$aabPath=" + file(aabPath).exists())
        println("$aabReleasePath=" + file(aabReleasePath).exists())
        println("$outputDir=" + file(outputDir).exists())
        println("$targetPath=" + file(targetPath).exists())

        if (!file(aabPath).exists()) {
            aabPath = aabReleasePath
        }

        exec {
            commandLine 'mv', aabPath, targetPath
        }
    }
}
tasks.configureEach { task ->
    if (task.name == 'assembleRelease') {
        task.finalizedBy renameAndMoveApk
    }

    if (task.name == 'bundleRelease') {
        task.finalizedBy renameAndMoveAab
    }
}